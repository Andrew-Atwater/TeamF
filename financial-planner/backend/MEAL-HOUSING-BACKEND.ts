// RYAN BROWN, TEAM FARHAN (Team F)
// Format source: https://www.chartjs.org/
// THIS CODE WAS GENERATED BY GENERATIVE AI (CoPilot)
// 5/9 ON CAMPUS MEAL HOUSING VERSUS OFF CAMPUS COMPARISON BACKEND PROGRAM

import { Chart, ChartConfiguration, registerables } from 'chart.js';
Chart.register(...registerables);

// Input housing/meal costs and returns a base64 PNG Chart.js graph
const barLabels = [
    "Single Housing & Basic Meal",
    "Single Housing & Flex Meal",
    "Double Housing & Basic Meal",
    "Double Housing & Flex Meal"
];

const weightCounts = {
    "Housing Cost": [4428, 4428, 3477, 3477],
    "Meal Cost": [3430, 3580, 3430, 3580]
};

// Create the stacked bar chart configuration
const config: ChartConfiguration = {
    type: 'bar',
    data: {
        labels: barLabels,
        datasets: [
            {
                label: "Housing Cost",
                data: weightCounts["Housing Cost"],
                backgroundColor: 'rgba(75, 192, 192, 0.6)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1
            },
            {
                label: "Meal Cost",
                data: weightCounts["Meal Cost"],
                backgroundColor: 'rgba(153, 102, 255, 0.6)',
                borderColor: 'rgba(153, 102, 255, 1)',
                borderWidth: 1
            }
        ]
    },
    options: {
        responsive: true,
        plugins: {
            title: {
                display: true,
                text: "Comparison of Semesterly Housing & Meal for Students at U'Maine Orono"
            },
            legend: {
                position: 'top'
            }
        },
        scales: {
            x: {
                stacked: true
            },
            y: {
                stacked: true,
                beginAtZero: true
            }
        }
    }
};

// Render the chart and export as base64
function renderChartToBase64(): string {
    // Create a canvas element
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');

    if (!ctx) {
        throw new Error("Failed to get canvas context");
    }

    // Render the chart
    new Chart(ctx, config);

    // Convert the canvas to a base64 image
    return canvas.toDataURL('image/png');
}

// Generate the base64 image
const base64Image = renderChartToBase64();
console.log(base64Image); // Outputs the base64 string of the chart